// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String?   @unique
  password      String
  name          String?
  avatar        String?
  credits       Int       @default(100)
  plan          Plan      @default(FREE)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  apiKeys       ApiKey[]
  conversations Conversation[]
  payments      Payment[]
  creditHistory CreditHistory[]
  
  @@map("users")
}

model ApiKey {
  id        String   @id @default(cuid())
  name      String
  key       String   @unique
  userId    String
  isActive  Boolean  @default(true)
  lastUsed  DateTime?
  usageCount Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("api_keys")
}

model AIModel {
  id          String   @id @default(cuid())
  name        String
  displayName String
  description String?
  category    ModelCategory
  provider    String
  endpoint    String
  pricing     Json     // {inputPrice: number, outputPrice: number, currency: string}
  features    Json     // {supportedFormats: string[], maxTokens: number, etc}
  rating      Float    @default(0)
  callCount   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  conversations Conversation[]
  
  @@map("ai_models")
}

model Conversation {
  id        String   @id @default(cuid())
  title     String?
  userId    String
  modelId   String
  messages  Json     // Array of messages
  metadata  Json?    // Additional conversation data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  model AIModel @relation(fields: [modelId], references: [id])
  
  @@map("conversations")
}

model Payment {
  id          String        @id @default(cuid())
  userId      String
  amount      Float
  currency    String        @default("USD")
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  stripeId    String?       @unique
  credits     Int
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

model CreditHistory {
  id          String      @id @default(cuid())
  userId      String
  amount      Int
  type        CreditType
  description String?
  balance     Int         // Balance after this transaction
  metadata    Json?
  createdAt   DateTime    @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("credit_history")
}

model News {
  id          String   @id @default(cuid())
  title       String
  content     String
  summary     String?
  source      String
  author      String?
  imageUrl    String?
  url         String   @unique
  category    String
  tags        String[]
  publishedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("news")
}

model Promotion {
  id          String   @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  link        String?
  provider    String
  discount    String?
  validFrom   DateTime
  validTo     DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("promotions")
}

enum Plan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum ModelCategory {
  LANGUAGE_MODEL
  IMAGE_GENERATION
  IMAGE_ANALYSIS
  AUDIO_GENERATION
  AUDIO_TRANSCRIPTION
  CODE_GENERATION
  EMBEDDING
  CHAT
  COMPLETION
}

enum PaymentMethod {
  STRIPE_CARD
  CRYPTO_USDT
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum CreditType {
  PURCHASE
  BONUS
  USAGE
  REFUND
} 